Дословно "инкремент" ("increment") означает "увеличение", а "декремент" ("decrement") — уменьшение.

В языке Си инкремент записывается как <code>++</code>, декремент — как <code>--</code>.
И инкремент, и декремент — это унарные операции, то есть у них один операнд.

Существуют две формы инкремента и декремента: преинкремент и предекремент (записываются как префиксные операции: знак операции пишется перед операндом) и постинкремент и постдекремент (записываются как постфиксные операции: знак операции пишется после операнда).

Синтаксис:

Преинкремент:
: ++<u>выражение</u>

Постинкремент:
: <u>выражение</u>++

Предекремент:
: --<u>выражение</u>

Постдекремент:
: <u>выражение</u>--

Семантика:

Побочный эффект вычисления:
* Инкремент: запись значения в аргумент-выражение на единицу большего его текущего значения.
* Декремент: запись значения в аргумент-выражение на единицу меньшего его текущего значения.

Отсюда следует семантическое ограничение: выражением может быть нечто, что можно использовать в левой части операции присваивания.

Пре- и пост- форма инкремента и декремента имеют несколько разный смысл, но это различие играет роль только при использовании значения результата выражения целиком.

Результат вычисления выражения:
* пре- форма: значение выражения-аргумента после изменения
* пост- форма: значение выражения-аргумента до изменения

Выражение:
 ++x
Эквивалентно следующим выражениям:
 x += 1
 x  = x + 1

Выражение:
 --x
Эквивалентно следующим выражениям:
 x -= 1
 x  = x - 1

Выражение:
 x++
Эквивалентно следующим выражениям, если не используется его результат:
 x += 1
 x  = x + 1

Выражение:
 --x
Эквивалентно следующим выражениям, если не используется его результат:
 x -= 1
 x  = x - 1

Когда проявляется различие между пре- и пост- формой?
На примере инкрмента.

В случае преинкремента:
 x = 1;
 y = ++x;
В результате — значение x равно 2 (увеличили), значение y равно 2 (значение x ''после'' увеличения).

В случае постинкермента:
 x = 1;
 y = x++;
В результате — значение x равно 2 (увеличили), значение y равно 1 (значение x ''до'' увеличения).

Таким образом, последний случай эквивалентен:
 x = 1;
 tmp = x;
 x += 1;
 y = tmp;
