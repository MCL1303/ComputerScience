==Введение==
Ввод и вывод программы – это то, как программа "общается" с "внешним миром" (т.е. с чем-то внешним, по отношению к ней – с другой программой или с устройствами компьютера).
Если программа никак не "общается" с "внешним миром", то эта программа – "вещь в себе", она бесполезна.

Для программ, работающих в текстовом терминале/консоли в стандартной библиотеке языка Си предусмотрены функции для считывания (ввода) текстовой информации с клавиатуры и печати (вывода) текстовой информации на экране. Таким образом программа может взаимодействовать с устройствами вывода, а через них – с пользователем.

Наиболее универсальные из функций стандартной библиотеки – это функции форматного ввода вывода.
Они объявлены в заголовочном файле stdio.h. Название "stdio" – это сокращение от слов "standard input/output", т.е. "стандартный ввод-вывод" (никаким "studio" тут и не пахнет!). Если мы собираемся вводить и выводить какие-то данные и не хотим самосоятельно писать функции для этого, необходимо подключить этот заголовочный файл, чтобы пользоваться стандартными функциями.

Для вывода, как мы уже знаем, используется функция printf.
Для ввода используется функция scanf.
Названия функций отражают то, что они делают: "print" – "печатать", "scan" – "считывать", а буква f в названиях от "format".

Что означает слово "формат" здесь? Подразумевается то, что эти функции получают описание того, в каком формате вводить и выводить данные в виде специального текста – форматной строки.

Итак, первый аргумент этих функций – это форматная строка.
Форматная строка – это самая обычная константная строка, но некоторые из символов в ней функции, занимающиеся форматным вводом-выводом, воспринимают как служебные, которые задают формат данных, участвующих в вводе или выводе.
В функциях форматного ввода-вывода стандартной библиотеки таким символом является символ %, с которого начинается описание формата, а один или несколько символов после него описывают сам формат. Все вместе каждое такое сочетание символов называют форматным спецификатором.
В зависимости от типа данных, разрешены разные форматы.

Разберемся, что надо писать для тех числовых данных, которые мы знаем.
Для ввода-вывода значений типа int в десятичном виде, надо использовать спецификатор %d (от "decimal").
Для значений типа double немного хитрее: для ввода надо использовать спецификатор %lf (как бы "long float"), для вывода – %g, такая рекомендация связана с тем, чтобы при выводе не печатать незначащих нулей после точки.

Сложно? Вообще-то, пока еще ничего сложного нет. Но все-таки... Вот, скажем, мы хотим напечатать целое число –  неужели нельзя было просто сделать как-то так, чтобы можно было просто указать, что мы хотим напечатать – безо всяких спецификаторов?
Но не зря было сказано, что эти функции очень универсальные. Захотеть напечатать целое число можно в десятичной записи, а можно – в шестнадцатеричной. Дробное число можно выводить с разным количеством знаков после запятой. Это лишь наиболее часто встречающиеся варианты. И всем этим можно управлять с помощью записи форматного спецификатора. Но за эту универсальность приходится расплачиваться тем, что надо про эти спецификаторы знать (или смотреть в документации).

==Печать текста и печать значений==

Рассмотрим пример.

Пусть у нас в программе есть переменная z:
 int z;
Сохраним в ней значение 44 с помощью операции присваивания:
 z = 44;
Теперь попробуем напечатать z.

Если мы напечатаем вот так:
 printf("z\n");
То у нас напечатается просто строчка текста, состоящая из символа z и перехода на новую строку. И с точки зрения программы тот символ z, который мы тут печатаем, никакого отношения к переменной z нашей программы не имеет.

То, что записано в нашей программе внутри двойных кавычек, для нашей программы - это просто явно заданные текстовые данные (т.наз. строковая константа).
Все, что находится в двойных кавычках никакого отношения к переменным, функциям и другим объектам программы не имеет – это просто набор символов.

Поэтому если мы, например, напишем:
 printf("z+3\n");
То никаких действий, кроме печати, тут нет. Да, программа напечатает текст z+3 и переведет печать на новую строчку, но никакого сложения в нашей программе выполняться не будет, потому что то, что выглядит тут как сложение - это всего лишь символы текстовых данных, а не операция сложения.

С помощью printf можно напечатать не только явно заданный текст, но и значения каких-то других данных в программе, например, значение переменной z, для этого в той строке данных, которую мы передаем функции printf должны появиться спецификаторы формата печати, которые записываются с помощью %:
 printf("%d\n", z);
%d внутри двойных кавычек – это тоже самые обычные символы, но они, если встретились в первом аргументе функции printf, обрабатываются этой функцией специальным образом: печатая текст, переданный в качестве своего первого аргумента, функция printf заменит этот %d на значение следующего аргумента.

Так что мы напечатаем значение переменной z (т.е. 44) и переход на новую строку.

Если мы захотим напечатать значение более симпатчно, чтобы было понятно, что это значение означает, мы можем напечатать его вот так:
 printf("z = %d\n", z);
– здесь z из строковой константы напечатается как текст, а %d заменится на значение следующего аргумента? а это уже z – переменная нашей программы.

Вообще, текст может не иметь никакого отношения к тому, что мы печатаем; например, такой printf:
 printf("j = %d\n", z);
- послушно напечатает в нашем случае:

 j = 44

– даже если никакой переменной j в нашей программе и нет, для printf-а j – это просто часть того текста, который ее попросили напечатать.

А вот если мы напишем такой printf:
 printf("z = %d\n", j);
То если переменной j в нашей программе нет, то программа не скомпилируется, потому что мы нарушили правила языка Си и пытаемся использовать то, что не объявляли.

Теперь если мы хотим напечатать не текст z+1, а значение выражения z+1 (но для этого у нас в программе должна быть такая переменная z, а в нашем случае у нас она есть), то мы можем сделать это так:
 printf("%d\n", z+1);
Вот, теперь в нашей программе появились действия по сложению каких-то числовых значений.
Программа вычислит значения всех аргументов - первый аргумент никак вычислять не надо, это уже готовый текст, вычислит значение второго аргумента, у нас оно равно 44+1, т.е. 45 и вызовет функцию printf, передав ей все эти значения.
Функция printf в результате напечатает значение первого аргумента с теми "подстановками", которые она делает, т.е. напечатает 45 и переход на новую строку.

Еще мы можем захотеть напечатать какой-то текст, который даст понять пользователю нашей программы, какие именно значения мы хотим складывать:
 printf("%d+1\n", z);
Но здесь никакого сложения нет, мы просто говорим, функции printf что хотим напечатать текст по формату (т.е. как бы по шаблону) "%d+1\n", где %d мы заменим на значение следующего аргумента - т.е. z, в результате программа напечатает текст 44+1.

Если мы хотим для красоты (и понятности) напечатать и то, что мы складываем, и то, что получается в результате сложения, можно совместить несколько таких печатей:
 printf("z+1");
 printf(" = ");
 printf("%d+1", z);
 printf(" = ");
 printf("%d", z + 1);
 printf("\n");
Или, чтобы не вызывать функцию printf много раз, можно осуществить аналогичную печать с помощью одного вызова:
 printf("z+1 = %d+1 = %d\n", z, z+1);
Нам напечатают:

 z+1 = 44+1 = 45

А если мы поменяем местами последние аргументы:
 printf("z+1 = %d+1 = %d\n", z+1, z);
то нам напечатают, хотя и нечто странное для потенциального пользователя:

 z+1 = 45+1 = 44

– но только потому, что именно так мы (как программисты) и попросили функцию printf.

==Ввод==

Для форматного ввода предназначена функция scanf.
Первый аргумент определяет формат текстовых данных, который ожидается при вводе, а каждый форматный спецификатор – формат очередной "порции" текстовых данных и их преобразование в значение, которое будет сохранено в очередную переданную переменную программы. Переменные должны передаваться с использованием символа & ("амперсанд") перед ними (есть случаи, когда его использовать нельзя, но с такими случаями мы столкнемся позже).

; Achtung!!!
Не забывайте & (амперсанд) перед переменными в scanf! Их отсутствие не вызывает ошибку (error) компиляции, компилятор может сообщать лишь предупреждение (warning) и программа будет скомпилирована, но работать правильно она не будет.

Рассмотрим небольшой пример:
 int n;
 printf("Enter an integer value, please: ", &n);
 scanf("%d", &n);

Такой фрагмент программы вначале напечатает просьюу ввести целочисленное значение, а затем будет ожидать ввода текста, который является записью целого числа в десятичном виде (%d). После считывания текстовой записи числа, соответствующее этой записи значение будет "помещено" в переменную n.

При помощи одного вызова scanf можно считывать сразу несколько значений:
 int k;
 double w;
 scanf("%d%lf", &k, &w);

Такой фрагмент программы будет ожидать ввода текста, который является записью целого числа в десятичном виде (%d) и записи числа с плавающей точкой (%lf), разделенных одним или несколькими пробельными символами (символами пробела, табуляции и перехода на новую строку). При считывании текста числовые значения, соответствующие текстовой записи чисел, "помещаются" в переданные переменные. Однако обратите внимание, что пользователю в данном случае будет совершенно неясно, ввода каких данных ожидает программа.
