Оператор if нужен, чтобы в зависимости от условия выполнять (или не выполнять) либо одни действия, либо другие.

Существует два варианта оператора if: с альтернативой (с двумя ветвями) и без альтернативы (с одной ветвью).

==Синтаксис==

Оператор if с альтернативой:
: if (<u>выражение</u>) <u>оператор-1</u> else <u>оператор-2</u>

Читается это так:
"Если верно <u>выражение</u>, то выполнить <u>оператор-1</u> иначе выполнить <u>оператор-2</u>."

Оператор if без альтернативы:
: if (<u>выражение</u>) <u>оператор</u>

Читается это так:
"Если верно <u>выражение</u>, то выполнить <u>оператор</u>."

if и else – это ключевые слова, т.е. они зарезервированы и их нельзя использовать в качестве идентификаторов , т.е. имен для чего-либо, например, переменных.
Сами по себе ключевые слова операторами не являются, однако играют важную роль в записи (синтаксисе) операторов; оператором является вся конструкция целиком. Тем не менее, поскольку это ключевое встречается
Несмотря на скобки после if, это не вызов функции if, а часть оператора if.

Запись оператора if состоит, в том числе, из других операторов. Вместо каждой из конструкций, обозначенной в шаблоне, с помощью которого мы описывыаем синтаксис, как <u>оператор</u>, <u>оператор-1</u> или <u>оператор-2</u> надо поставить что-то, что тоже будет правильным оператором.  Внутри оператора if может оказаться другой оператор if – к этому случаю мы вернемся чуть позже.
Кроме оператора if есть и другие операторы языка Си, которые тоже состоят из других операторов. Про оператор оказавшийся "внутри" другого, говорят что он "вложенный" (в тот, который его содержит).

Если посмотреть на синтаксис оператора, то никаких символов "точка с запятой" там не фигурирует. Тем не менее, в записи оператора if "точки с запятой" оказаться могут. Откуда? Они могут оказаться там в качестве частей других операторов, которые используются внутри оператора if. Поэтому лишних точек с запятой ставить не надо, это может привести к ошибке.

Обратите внимание, что то, что можно выполнить, в зависимости от условия – это ровно один оператор в каждой из ветвей. А что делать, если в зависимости от условия надо выполнить не один, а последовательность из нескольких операторов? Очень просто! Надо использовать составной оператор, с помощью которого мы объединяем последовательность из нескольких операторов в один.

==Семантика==

Смысл конструкций, входящих в оператор if:  <u>выражение</u> – это условие, в зависимости от истинности которого выполняются (либо не выполняются) вложенные операторы.

Выполнение оператора if с альтернативой:
1. Вычисляется <u>выражение</u> в скобках (оно играет роль условия).
2. Если вычисленное значение истина (т.е. условие верно), то выполняется <u>оператор-1</u>, иначе (т.е. если условие неверно) выполняется <u>оператор-2</u>.

Выполнение оператора if без альтернативы:
1. Вычисляется <u>выражение</u> в скобках.
2. Если вычисленное значение истина (т.е. условие верно), то выполняется <u>оператор</u>.

==Пример==
Целочисленный арифметический калькулятор.

  #include <stdio.h>

  int main(void) {
      int x, y;
      int op;
      printf("x = ");
      scanf("%d", &x);
      printf("y = ");
      scanf("%d", &y);
      printf("Choose operation number:\n\t1) +\n\t2) -\n");
      scanf("%d", &op);
      if (op == 1) {
          printf("x+y = %d+%d = %d\n", x, y, x+y);
      } else if (op == 2) {
          printf("x-y = %d-%d = %d\n", x, y, x-y);
      } else {
          printf("Error: wrong operation number %d\n", op);
      }
      return 0;
  }

Добавьте операции умножения и деления с остатком (при выборе операции деления печатается и результат целочисленного деления, и остаток). Учтите, что делить на ноль нельзя, перед выполнением деления надо делать проверку и в случае нулевого делителя печатать сообщение об ошибке и деление не производить.
