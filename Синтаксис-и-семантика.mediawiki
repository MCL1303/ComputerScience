== Немного философии ==
Сперва небольшое лирическое (а точнее, философское) отступление. 

Если философски посмотреть на те объекты, которыми манипулирует наше сознание, то можно выделить две составляющие, в рамках которых мы мыслим тот или иной объект – это форма объекта и содержание объекта. Не углубляясь более в философию (слова "форма" и "содержание" в данном случае надо воспринимать как философские категории), достаточно будет представлять себе эти два понятия как "структуру" и "смысл". 

== Изучение конструкций языков программирования ==
Вернемся к языкам вообще и языкам программирования в частности. 
В рамках того или иного языка мы тоже оперируем некоторыми объектами – конструкциями данного языка. 
Говоря о естественных языках, можно вспомнить о таких конструкциях как фразы, предложения, статьи, литературные произведения и т.п. Если говорить о языках программирования, то выражения, операторы, программы и т.п. – это типичные конструкции большинства языков программирования. 

Конструции языка, состоящие из слов (лексем), можно рассматривать, во-первых, с точки зрения формы (или структуры) – т.е. правил построения (записи), а во-вторых, с точки зрения содержания (или смысла) – т.е. того, что та или иная конструкция означает. 
Применительно к языкам для этих понятий используются термины синтаксис и семантика. В дословном переводе с греческого: синтаксис – "построение", "порядок", а семантика – "значение", "смысл". 

Изучая ту или иную конструкцию языка программирования нас должны интересовать, в первую очередь, два вопроса: как записать что-то, что будет являться корректной конструкцией (т.е. синтаксис), и какой смысл имеет данная конструкция (т.е. семантика). 

== Синтаксис ==
Синтаксис – это формальные правила записи. Эти правила можно воспринимать как "схему" или "шаблон" текста. Используя этот шаблон можно построить текст, являющийся правильной записью нужной нам синтаксической конструкции. Эти же правила можно использовать и с обратной целью: чтобы определить, записью какой конструкции является фрагмент текста программы. Именно так разбирают текст программ компиляторы и интерпретаторы, а если фрагмент текста не подходит ни под одну из конструкций, ожидаемых в данном месте программы,  выдается сообщение об ошибке. 

=== Описание синтаксиса ===
Синтаксис конструкций мы будем записывать как шаблон текста. В этом шаблоне есть уже готовые части текста, т.е. тот текст, который обязательно должен быть в описываемой конструкции, а есть подчеркнутые названия других используемых констркуций, на которые надо эти подчеркнуты названия заменить. 

В любом месте программы на языке Си (кроме строк, начинающихся с символа #), где может стоять один пробел, можно поставить любое количество т.наз. пробельных символов, т.е. символов пробела, табуляции и перехода на новую строку. Компилятор эти пробелы игнорирует, а вот для программиста очень важно то, как оформлен текст программы. Если текст программы оформлен плохо, то разобраться в нем становится гораздо сложнее даже автору программы. А это означает, что сложнее (а значит, и дольше), искать ошибки в программе, если мы их случайно совершили. Поэтому помимо формальных правил, необходимо следовать некоторым правилам форматирования, которые повышают удобочитаемость текста программы. 

== Семантика ==
Семантика – это смысл. Для операторов это означает описание того, что именно программа будет делать при выполнении данной конструкции. Если мы говорим о компилируемом языке (в нашем случае о языке Си), более правильно будет сказать, что это компилятор должен сделать так, чтобы сгенерированная им исполняемая программа делала именно то, что соответствует смыслу конструкции в тексте программы. 
Блок-схемы – удобный способ проиллюстрировать семантику операторов.

== Прагматика ==
Синтаксис и семантика касаются формальной стороны языка, но для хорошего владения средствами языка одной формальной стороны мало, нужно еще знать практическую сторону.

Записать одну и ту же синтаксическую конструкцию можно по-разному – т.е. по-разному отформатировать текст.
Как и в естественных языках, так и в языках программирования, схожего или даже одинакового смысла можно добиться с помощью синтаксически разных конструкций.
Например, в языке Си цикл, записанный с помощью оператора for можно легко переписать в цикл, записанный с помощью оператора while, который будет делать то же самое, и наоборот – цикл while можно переписать с помощью for. 

Как лучше выразить средствами языка то, что нам необходимо? Какую конструкцию выбирать, если есть выбор? Как лучше использовать ту или иную конструкцию языка? Как добиться того, чтобы программа лучше работала?

На эти вопросы отвечает следующий уровень восприятия языков – прагматика.